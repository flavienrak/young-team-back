generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
  output        = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  secteur  String?
  type     String  @default("person")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Partage   Partage[]
  file      File[]
  section   Section[]
  UserInfos UserInfos?
}

model UserInfos {
  id              Int     @id @default(autoincrement())
  isVerified      Boolean @default(false)
  acceptCondition Boolean @default(false)

  userId Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Partage {
  id    Int    @id @default(autoincrement())
  title String

  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id])
  section Section[]
}

model Section {
  id      Int    @id @default(autoincrement())
  content String

  userId    Int
  partageId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  partage Partage @relation(fields: [partageId], references: [id])

  files File[] @relation("SectionFiles")
}

model File {
  id    Int     @id @default(autoincrement())
  image String?

  userId    Int
  sectionId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  section Section? @relation("SectionFiles", fields: [sectionId], references: [id])
}
